{"version":3,"sources":["useBatteryEvents.js"],"names":["getBatteryThenAssignEvent","nav","callbackRef","eventName","cb","current","getBattery","then","batteryManager","addEventListener","removeEventListener","useBatteryEvents","onChargingChangeRef","setOnChargingChangeRef","onChargingTimeChangeRef","setOnChargingTimeChangeRef","onDischargingTimeChangeRef","setOnDischargingTimeChangeRef","onLevelChange","setOnLevelChange","Object","freeze","onChargingChange","onChangingTimeChange","onDischargingTimeChange"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,GAAD,EAAMC,WAAN,EAAmBC,SAAnB,EAAiC;AACjE,wBAAU,YAAM;AACd,QAAMC,EAAE,GAAG,SAALA,EAAK,GAAa;AACtB,UAAIF,WAAW,CAACG,OAAhB,EAAyB;AACvBH,QAAAA,WAAW,CAACG,OAAZ,OAAAH,WAAW,YAAX;AACD;AACF,KAJD;;AAMAD,IAAAA,GAAG,CAACK,UAAJ,GAAiBC,IAAjB,CAAsB,UAACC,cAAD;AAAA,aAAoBA,cAAc,CAACC,gBAAf,CAAgCN,SAAhC,EAA2CC,EAA3C,CAApB;AAAA,KAAtB;AAEA,WAAO,YAAM;AACXH,MAAAA,GAAG,CAACK,UAAJ,GAAiBC,IAAjB,CAAsB,UAACC,cAAD;AAAA,eAAoBA,cAAc,CAACE,mBAAf,CAAmCP,SAAnC,EAA8CC,EAA9C,CAApB;AAAA,OAAtB;AACD,KAFD;AAGD,GAZD,EAYG,CAACF,WAAD,CAZH;AAaD,CAdD;;AAiDA,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,MAAMV,GAAG,GAAG,+BAAZ;;AAD6B,wBAEyB,kCAFzB;AAAA;AAAA,MAEtBW,mBAFsB;AAAA,MAEDC,sBAFC;;AAAA,yBAGiC,kCAHjC;AAAA;AAAA,MAGtBC,uBAHsB;AAAA,MAGGC,0BAHH;;AAAA,yBAIuC,kCAJvC;AAAA;AAAA,MAItBC,0BAJsB;AAAA,MAIMC,6BAJN;;AAAA,yBAKa,kCALb;AAAA;AAAA,MAKtBC,aALsB;AAAA,MAKPC,gBALO;;AAO7B,MAAI,CAAClB,GAAD,IAAQ,CAACA,GAAG,CAACK,UAAb,IAA2B,OAAOL,GAAG,CAACK,UAAX,KAA0B,UAAzD,EAAqE;AACnE,WAAO,0CAAyB,6CAAzB,CAAP;AACD;;AAGDN,EAAAA,yBAAyB,CAACC,GAAD,EAAMW,mBAAN,EAA2B,gBAA3B,CAAzB;AACAZ,EAAAA,yBAAyB,CAACC,GAAD,EAAMa,uBAAN,EAA+B,oBAA/B,CAAzB;AACAd,EAAAA,yBAAyB,CAACC,GAAD,EAAMe,0BAAN,EAAkC,uBAAlC,CAAzB;AACAhB,EAAAA,yBAAyB,CAACC,GAAD,EAAMiB,aAAN,EAAqB,aAArB,CAAzB;AAEA,SAAOE,MAAM,CAACC,MAAP,CAAc;AACnBC,IAAAA,gBAAgB,EAAET,sBADC;AAEnBU,IAAAA,oBAAoB,EAAER,0BAFH;AAGnBS,IAAAA,uBAAuB,EAAEP,6BAHN;AAInBC,IAAAA,aAAa,EAAEC;AAJI,GAAd,CAAP;AAMD,CAvBD;;eAyBeR,gB","sourcesContent":["import { useEffect } from 'react';\nimport useCallbackRef from './useCallbackRef';\nimport createCbSetterErrorProxy from './utils/createCbSetterErrorProxy';\nimport getNavigator from './utils/getNavigator';\n\nconst getBatteryThenAssignEvent = (nav, callbackRef, eventName) => {\n  useEffect(() => {\n    const cb = (...args) => {\n      if (callbackRef.current) {\n        callbackRef.current(...args);\n      }\n    };\n\n    nav.getBattery().then((batteryManager) => batteryManager.addEventListener(eventName, cb));\n\n    return () => {\n      nav.getBattery().then((batteryManager) => batteryManager.removeEventListener(eventName, cb));\n    };\n  }, [callbackRef]);\n};\n\n/**\n * Returns a frozen object of callback setters to handle battery related events.<br/>\n *\n * ### Usage:\n *\n * ```jsx harmony\n * const BatteryReport = () => {\n *   const [ state, setState ] = useState({});\n *   const { onMount } = useLifecycle();\n *   const { onChargingChange, onChangingTimeChange, onDischargingTimeChange, onLevelChange } = useBatteryEvents();\n *\n *   const handleBatteryChange = useCallback(async () => {\n *     if(window.navigator.getBattery) {\n *       const battery = await window.navigator.getBattery();\n *\n *       setState(battery);\n *     }\n *   }, [state]);\n *\n *   onChargingChange(handleBatteryChange);\n *   onChangingTimeChange(handleBatteryChange);\n *   onDischargingTimeChange(handleBatteryChange);\n *   onLevelChange(handleBatteryChange);\n *   onMount(handleBatteryChange);\n *\n *   return (\n *     <div style={compStyle}>\n *       Battery level: {state.level ? state.level*100 : 0}%\n *     </div>\n *   );\n * };\n * ```\n */\nconst useBatteryEvents = () => {\n  const nav = getNavigator();\n  const [onChargingChangeRef, setOnChargingChangeRef] = useCallbackRef();\n  const [onChargingTimeChangeRef, setOnChargingTimeChangeRef] = useCallbackRef();\n  const [onDischargingTimeChangeRef, setOnDischargingTimeChangeRef] = useCallbackRef();\n  const [onLevelChange, setOnLevelChange] = useCallbackRef();\n\n  if (!nav || !nav.getBattery || typeof nav.getBattery !== 'function') {\n    return createCbSetterErrorProxy('Battery API is not supported by your device');\n  }\n\n  // Handling the battery events\n  getBatteryThenAssignEvent(nav, onChargingChangeRef, 'chargingchange');\n  getBatteryThenAssignEvent(nav, onChargingTimeChangeRef, 'chargingtimechange');\n  getBatteryThenAssignEvent(nav, onDischargingTimeChangeRef, 'dischargingtimechange');\n  getBatteryThenAssignEvent(nav, onLevelChange, 'levelchange');\n\n  return Object.freeze({\n    onChargingChange: setOnChargingChangeRef,\n    onChangingTimeChange: setOnChargingTimeChangeRef,\n    onDischargingTimeChange: setOnDischargingTimeChangeRef,\n    onLevelChange: setOnLevelChange,\n  });\n};\n\nexport default useBatteryEvents;\n"],"file":"useBatteryEvents.js"}