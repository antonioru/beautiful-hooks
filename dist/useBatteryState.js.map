{"version":3,"sources":["useBatteryState.js"],"names":["useBatteryState","state","setState","onMount","onChargingChange","onChangingTimeChange","onDischargingTimeChange","onLevelChange","handleBatteryChange","nav","getBattery","then","batteryManager","nextState","charging","chargingTime","dischargingTime","level"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAuBA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAAA,kBACF,qBAAS,EAAT,CADE;AAAA;AAAA,MACrBC,KADqB;AAAA,MACdC,QADc;;AAAA,sBAER,gCAFQ;AAAA,MAEpBC,OAFoB,iBAEpBA,OAFoB;;AAAA,0BAG+D,oCAH/D;AAAA,MAGpBC,gBAHoB,qBAGpBA,gBAHoB;AAAA,MAGFC,oBAHE,qBAGFA,oBAHE;AAAA,MAGoBC,uBAHpB,qBAGoBA,uBAHpB;AAAA,MAG6CC,aAH7C,qBAG6CA,aAH7C;;AAM5B,MAAMC,mBAAmB,GAAG,wBAAY,YAAM;AAC5C,QAAMC,GAAG,GAAG,+BAAZ;;AAEA,QAAIA,GAAG,IAAIA,GAAG,CAACC,UAAX,IAAyB,OAAOD,GAAG,CAACC,UAAX,KAA0B,UAAvD,EAAmE;AACjED,MAAAA,GAAG,CAACC,UAAJ,GAAiBC,IAAjB,CAAsB,UAACC,cAAD,EAAoB;AACxC,YAAMC,SAAS,GAAG;AAChBC,UAAAA,QAAQ,EAAEF,cAAc,CAACE,QADT;AAEhBC,UAAAA,YAAY,EAAEH,cAAc,CAACG,YAFb;AAGhBC,UAAAA,eAAe,EAAEJ,cAAc,CAACI,eAHhB;AAIhBC,UAAAA,KAAK,EAAEL,cAAc,CAACK;AAJN,SAAlB;;AAOA,YAAIJ,SAAS,CAACC,QAAV,KAAuBb,KAAK,CAACa,QAA7B,IAAyCD,SAAS,CAACE,YAAV,KAA2Bd,KAAK,CAACc,YAA1E,IACCF,SAAS,CAACG,eAAV,KAA8Bf,KAAK,CAACe,eADrC,IACwDH,SAAS,CAACI,KAAV,KAAoBhB,KAAK,CAACgB,KADtF,EAC6F;AAC3Ff,UAAAA,QAAQ,CAACW,SAAD,CAAR;AACD;AACF,OAZD;AAaD;AACF,GAlB2B,EAkBzB,CAACZ,KAAD,CAlByB,CAA5B;AAqBAI,EAAAA,oBAAoB,CAACG,mBAAD,CAApB;AACAJ,EAAAA,gBAAgB,CAACI,mBAAD,CAAhB;AACAF,EAAAA,uBAAuB,CAACE,mBAAD,CAAvB;AACAD,EAAAA,aAAa,CAACC,mBAAD,CAAb;AAEAL,EAAAA,OAAO,CAACK,mBAAD,CAAP;AAEA,SAAOP,KAAP;AACD,CAnCD;;eAqCeD,e","sourcesContent":["import { useState, useCallback } from 'react';\nimport useBatteryEvents from './useBatteryEvents';\nimport useLifecycle from './useLifecycle';\nimport getNavigator from './utils/getNavigator';\n\n/**\n * Returns the current state of the the battery, when supported.<br/>\n *\n * ### Usage:\n *\n * ```jsx harmony\n * const BatteryReporter = () => {\n *   const { charging, chargingTime, level, dischargingTime } = useBatteryState();\n *\n *   return (\n *     <div style={compStyle}>\n *        Battery state:\n *        <p>Is charging: {charging ? 'yes' : 'no'}</p>\n *        <p>Battery level: {level * 100}%</p>\n *        <p>Charging time: {chargingTime}</p>\n *        <p>Discharging time: {dischargingTime}</p>\n *     </div>\n *    );\n * };\n * ```\n */\nconst useBatteryState = () => {\n  const [state, setState] = useState({});\n  const { onMount } = useLifecycle();\n  const { onChargingChange, onChangingTimeChange, onDischargingTimeChange, onLevelChange } = useBatteryEvents();\n\n  // retrieve the battery state to save it into a local state\n  const handleBatteryChange = useCallback(() => {\n    const nav = getNavigator();\n\n    if (nav && nav.getBattery && typeof nav.getBattery === 'function') {\n      nav.getBattery().then((batteryManager) => {\n        const nextState = {\n          charging: batteryManager.charging,\n          chargingTime: batteryManager.chargingTime,\n          dischargingTime: batteryManager.dischargingTime,\n          level: batteryManager.level,\n        };\n\n        if (nextState.charging !== state.charging || nextState.chargingTime !== state.chargingTime\n          || nextState.dischargingTime !== state.dischargingTime || nextState.level !== state.level) {\n          setState(nextState);\n        }\n      });\n    }\n  }, [state]);\n\n  // when battery changes save the state again\n  onChangingTimeChange(handleBatteryChange);\n  onChargingChange(handleBatteryChange);\n  onDischargingTimeChange(handleBatteryChange);\n  onLevelChange(handleBatteryChange);\n  // when component mount, get the battery state and save it to a local state\n  onMount(handleBatteryChange);\n\n  return state;\n};\n\nexport default useBatteryState;\n"],"file":"useBatteryState.js"}